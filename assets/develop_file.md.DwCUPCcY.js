import{_ as n,C as a,c as h,o as p,j as i,G as t,ar as o,a as k}from"./chunks/framework.DwOsETNj.js";const b=JSON.parse('{"title":"NapCat 文件处理框架指南","description":"","frontmatter":{},"headers":[],"relativePath":"develop/file.md","filePath":"develop/file.md","lastUpdated":1758357826000}'),r={name:"develop/file.md"};function d(g,s,E,c,u,q){const e=a("NolebasePageProperties"),l=a("NolebaseGitChangelog");return p(),h("div",null,[s[0]||(s[0]=i("h1",{id:"napcat-文件处理框架指南",tabindex:"-1"},[k("NapCat 文件处理框架指南 "),i("a",{class:"header-anchor",href:"#napcat-文件处理框架指南","aria-label":'Permalink to "NapCat 文件处理框架指南"'},"​")],-1)),t(e),s[1]||(s[1]=o(`<blockquote><p><strong>重要提示：</strong> 从 v4.8.115+ 开始，NapCat 引入了新的 Stream API 方案，推荐用于大文件传输和跨设备部署。</p></blockquote><h2 id="🚀-stream-api-推荐方案" tabindex="-1">🚀 Stream API (推荐方案) <a class="header-anchor" href="#🚀-stream-api-推荐方案" aria-label="Permalink to &quot;🚀 Stream API (推荐方案)&quot;">​</a></h2><p><strong>适用版本：</strong> v4.8.115+</p><h3 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h3><p>Stream API 提供了三种类型的接口，专门用于处理大文件传输和跨设备部署场景：</p><table tabindex="0"><thead><tr><th>API 类型</th><th>描述</th><th>使用场景</th></tr></thead><tbody><tr><td><strong>Normal</strong></td><td>普通接口，兼容 OneBot 标准</td><td>日常操作，无切片传输</td></tr><tr><td><strong>Download</strong></td><td>下载流接口</td><td>大文件下载，流式传输</td></tr><tr><td><strong>Upload</strong></td><td>上传流接口</td><td>大文件上传，流式传输</td></tr></tbody></table><h3 id="api-列表" tabindex="-1">API 列表 <a class="header-anchor" href="#api-列表" aria-label="Permalink to &quot;API 列表&quot;">​</a></h3><h4 id="normal-类型" tabindex="-1">Normal 类型 <a class="header-anchor" href="#normal-类型" aria-label="Permalink to &quot;Normal 类型&quot;">​</a></h4><ul><li><code>clean_stream_temp_file</code> - 清理临时文件</li></ul><h4 id="download-类型" tabindex="-1">Download 类型 <a class="header-anchor" href="#download-类型" aria-label="Permalink to &quot;Download 类型&quot;">​</a></h4><ul><li><code>test_download_stream</code> - 测试下载流</li><li><code>download_file_stream</code> - 文件下载流</li></ul><h4 id="upload-类型" tabindex="-1">Upload 类型 <a class="header-anchor" href="#upload-类型" aria-label="Permalink to &quot;Upload 类型&quot;">​</a></h4><ul><li><code>upload_file_stream</code> - 文件上传流</li></ul><blockquote><p>⚠️ <strong>注意：</strong> Upload/Download 组 API 的 action name 必须以 <code>stream</code> 结尾</p></blockquote><h4 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h4><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Python 调用 upload_file_stream 示例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 详见：https://github.com/NapNeko/NapCatQQ/blob/main/src/onebot/action/stream/test_upload_stream.py</span></span></code></pre></div><h3 id="响应格式" tabindex="-1">响应格式 <a class="header-anchor" href="#响应格式" aria-label="Permalink to &quot;响应格式&quot;">​</a></h3><p>Stream API 使用特殊的响应格式来处理流式传输：</p><h4 id="流传输状态标识" tabindex="-1">流传输状态标识 <a class="header-anchor" href="#流传输状态标识" aria-label="Permalink to &quot;流传输状态标识&quot;">​</a></h4><table tabindex="0"><thead><tr><th>状态</th><th>type 字段</th><th>描述</th></tr></thead><tbody><tr><td>传输中</td><td><code>stream</code></td><td>数据块传输</td></tr><tr><td>传输完成</td><td><code>response</code></td><td>流传输成功结束</td></tr><tr><td>传输失败</td><td><code>error</code></td><td>流传输异常结束</td></tr></tbody></table><h4 id="响应示例" tabindex="-1">响应示例 <a class="header-anchor" href="#响应示例" aria-label="Permalink to &quot;响应示例&quot;">​</a></h4><p><strong>数据传输中：</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ok&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;retcode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stream&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Index-&gt; 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;data_type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data_chunk&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;wording&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;echo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c5dc7stum6g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;stream&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stream-action&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>传输完成：</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ok&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;retcode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;response&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;data_type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data_complete&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Stream transmission complete&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;wording&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;echo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c5dc7stum6g&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;stream&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stream-action&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>传输失败：</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;failed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;retcode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;data_type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is a test error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;wording&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is a test error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;echo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ei2vqkdb6cb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;stream&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stream-action&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="优势与适用场景" tabindex="-1">优势与适用场景 <a class="header-anchor" href="#优势与适用场景" aria-label="Permalink to &quot;优势与适用场景&quot;">​</a></h3><p>✅ <strong>推荐使用场景：</strong></p><ul><li>🏢 <strong>企业级部署</strong>：大文件传输需求</li><li>🐳 <strong>Docker 容器化</strong>：容器间文件共享</li><li>🌐 <strong>跨设备传输</strong>：分布式环境文件同步</li><li>🔄 <strong>分离部署</strong>：前后端分离架构</li></ul><hr><h2 id="旧文档" tabindex="-1">旧文档 <a class="header-anchor" href="#旧文档" aria-label="Permalink to &quot;旧文档&quot;">​</a></h2><h3 id="发送文件" tabindex="-1">发送文件： <a class="header-anchor" href="#发送文件" aria-label="Permalink to &quot;发送文件：&quot;">​</a></h3><p>至少启动一个 HTTP 端口（可以和 WebSocket 服务端复用端口），并采用此端口在需要文件时通过 URL 传递文件。</p><h3 id="接收文件" tabindex="-1">接收文件： <a class="header-anchor" href="#接收文件" aria-label="Permalink to &quot;接收文件：&quot;">​</a></h3><ul><li>大部分文件提供了 URL 上报</li><li>没有 URL 时应该通过 get_file 获取本地文件</li><li>注意：音频给出的 URL 是 raw silk 格式未处理</li><li>非视频 图片 音频的普通文件的链接下载次数影响，可通过下面接口再次获取直链</li></ul><h2 id="通常方法获取直链和文件下载" tabindex="-1">通常方法获取直链和文件下载 <a class="header-anchor" href="#通常方法获取直链和文件下载" aria-label="Permalink to &quot;通常方法获取直链和文件下载&quot;">​</a></h2><h3 id="获取文件直链-raw" tabindex="-1">获取文件直链 (Raw) <a class="header-anchor" href="#获取文件直链-raw" aria-label="Permalink to &quot;获取文件直链 (Raw)&quot;">​</a></h3><p>通过以下端点获取文件直链：</p><ul><li><p><strong>群聊文件</strong>：<code>/get_group_file_url</code></p><ul><li>参数：<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>file_id     字符串   必须</span></span>
<span class="line"><span>group       字符串   必须</span></span></code></pre></div></li></ul></li><li><p><strong>私聊文件</strong>：<code>/get_private_file_url</code></p><ul><li>参数：<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>file_id     字符串   必须</span></span></code></pre></div></li></ul></li></ul><h3 id="下载到本地或者输出base64-raw" tabindex="-1">下载到本地或者输出base64 (Raw) <a class="header-anchor" href="#下载到本地或者输出base64-raw" aria-label="Permalink to &quot;下载到本地或者输出base64 (Raw)&quot;">​</a></h3><p>通过以下端点获取文件：</p><ul><li><strong>文件下载</strong>：<code>/get_file</code><ul><li>参数：<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>file_id     字符串   可选（file_id 或 file 任意一个用于标记文件获取）</span></span>
<span class="line"><span>file        字符串   可选（file_id 或 file 任意一个用于标记唯一文件获取）</span></span></code></pre></div></li></ul></li></ul><h2 id="file-音频文件的处理" tabindex="-1">File: 音频文件的处理 <a class="header-anchor" href="#file-音频文件的处理" aria-label="Permalink to &quot;File: 音频文件的处理&quot;">​</a></h2><h3 id="重点问题" tabindex="-1">重点问题 <a class="header-anchor" href="#重点问题" aria-label="Permalink to &quot;重点问题&quot;">​</a></h3><p>在接收音频时，NapCat 通常需要将音视频文件以本地文件的形式传递，无法直接提供 URL。这是因为：</p><ul><li>NTQQ 内部只能调用下载接口到本地，不能获取 URL（NapCat 虽然有能力获取，但存在新问题）</li><li>腾讯的音频文件为 silk 格式，必须使用 silk 和本地 ffmpeg 转码才能通用</li><li>在发送时也需要 silk 进行编码</li></ul><h3 id="napcat设计" tabindex="-1">NapCat设计 <a class="header-anchor" href="#napcat设计" aria-label="Permalink to &quot;NapCat设计&quot;">​</a></h3><ul><li><strong>接收时</strong>：接口请求后，NapCat 下载到本地，可选内置 silk/ffmpeg 进行转码，提供给外部 mp3 等通用格式</li><li><strong>发送时</strong>：接口请求后，NapCat 下载到本地，内置 silk/ffmpeg 进行转码 silk 后并进行发送</li></ul><h3 id="如何获取音频文件" tabindex="-1">如何获取音频文件 <a class="header-anchor" href="#如何获取音频文件" aria-label="Permalink to &quot;如何获取音频文件&quot;">​</a></h3><p>通过以下端点获取音频文件：</p><ul><li><strong>音频文件获取</strong>：<code>/get_record</code><ul><li>参数：<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>file_id     字符串   可选（file_id 或 file 任意一个用于标记文件获取）</span></span>
<span class="line"><span>file        字符串   可选（file_id 或 file 任意一个用于标记唯一文件获取）</span></span>
<span class="line"><span>out_format  字符串   可选（mp3, amr, wma, m4a, spx, ogg, wav, flac）</span></span></code></pre></div></li></ul></li></ul><h3 id="如何发送音频文件" tabindex="-1">如何发送音频文件 <a class="header-anchor" href="#如何发送音频文件" aria-label="Permalink to &quot;如何发送音频文件&quot;">​</a></h3><p>通过通常的方法发送音频文件，无需特别注意。</p><h2 id="file-视频文件的处理" tabindex="-1">File: 视频文件的处理 <a class="header-anchor" href="#file-视频文件的处理" aria-label="Permalink to &quot;File: 视频文件的处理&quot;">​</a></h2><h3 id="提示" tabindex="-1">提示 <a class="header-anchor" href="#提示" aria-label="Permalink to &quot;提示&quot;">​</a></h3><p>视频文件最大 100MB，超过此大小请通过群文件方式发送。</p><h2 id="file-图片文件的处理" tabindex="-1">File: 图片文件的处理 <a class="header-anchor" href="#file-图片文件的处理" aria-label="Permalink to &quot;File: 图片文件的处理&quot;">​</a></h2><h3 id="提示-1" tabindex="-1">提示 <a class="header-anchor" href="#提示-1" aria-label="Permalink to &quot;提示&quot;">​</a></h3><p>图片的链接具有约 2 小时的过期时间，当过期后会提示 <code>url expired</code>。</p><p>此时可以调用 <code>nc_get_rkey</code> 获取新 rkey 替换 rkey 使用，或者通过 <code>get_image</code>、<code>get_file</code>、<code>get_msg</code> 刷新获取新的 URL。</p>`,61)),t(l)])}const F=n(r,[["render",d]]);export{b as __pageData,F as default};
